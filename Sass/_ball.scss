
.moveX {
  animation: moveX 3.5s ease-in-out infinite alternate;
  margin: auto;
}
.moveY {
  animation: moveY 4.7s ease-in-out infinite alternate;
}
.smash-ball, .smash-ball div {
  width: $dim;
  height: $dim;
}
.smash-ball {
  transform-style: preserve-3d;
}
.orbit {
  border: {
    width: $orbitTh $orbitTh $orbitTh 0;
    style: solid;
    color: rgb(255,255,128) rgb(255,255,128) $t $t;
  }
  border-radius: 50%;
  filter: blur(1px);
  -webkit-filter: blur(1px);
  position: absolute;
  top: -$orbitTh;
  left: -$orbitTh;
  z-index: 1;
  @for $i from 1 through $orbits {
    &:nth-of-type(#{$i}) {
      transform: scale($orbitScale) rotateX(70deg) rotateY(180deg/$orbits * $i) rotateZ(0deg);
      animation: orbit-#{$i} 1.5s linear infinite;
    }
  } 
}
.ball {
  filter: saturate(150%);
  -webkit-filter: saturate(150%);
  background: {
    color: rgb(0,0,0);
    image:
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.2) ($dim * 1.8),
        rgb(75,244,163),
        rgba(75,244,163,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.9) ($dim * 1.2),
        rgb(232,58,94),
        rgba(232,58,94,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.6) at ($dim * 0.4) ($dim * 1.15),
        rgb(130,64,191) 5%,
        rgba(130,64,191,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.75) ($dim * 0.85),
        rgb(88,175,88),
        rgb(175,250,90),
        rgb(230,240,100),
        rgba(230,240,100,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.9) ($dim * 0.2),
        rgb(232,58,94),
        rgba(232,58,94,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * -0.1) ($dim * 0.25),
        rgb(10,73,202) 30%,
        rgba(10,73,202,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * -0.1) ($dim * 1.25),
        rgb(10,73,202) 30%,
        rgba(10,73,202,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.2) ($dim * 0.8),
        rgb(75,244,163),
        rgba(75,244,163,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.6) at ($dim * 0.4) ($dim * 0.15),
        rgb(130,64,191) 5%,
        rgba(130,64,191,0)
      ),
      radial-gradient(
        ($dim * 0.5) ($dim * 0.5) at ($dim * 0.75) ($dim * -0.15),
        rgb(88,175,88),
        rgb(175,250,90),
        rgb(230,240,100),
        rgba(230,240,100,0)
      ),
      linear-gradient(
        90deg,
        rgb(75,244,163),
        rgb(75,244,163),
        rgba(75,244,163,0)
      );
    size: $dim $dim;
  }
  border-radius: 50%;
  box-shadow:
      0 0 ($dim * 0.05) ($dim * 0.015) nth($glowColor, 1),
      0 0 ($dim * 0.15) ($dim * 0.1) nth($glowColor, 2);
  overflow: hidden;
  position: relative;
  animation: smashBall 1s linear infinite;
  &::before, &::after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
  }
  &::before {
    background-image:
      linear-gradient(
        90deg,
        $t,
        $t ($dim * 0.166),
        $lineColor ($dim * 0.166),
        $lineColor ($dim * 0.389),
        $t ($dim * 0.389),
        $t
      ),
      linear-gradient(
        $t,
        $t ($dim * 0.571),
        $lineColor ($dim * 0.571),
        $lineColor ($dim * 0.661),
        $t ($dim * 0.661),
        $t
      ),
      radial-gradient(
        $t,
        $t 62%,
        $lineColor 62%,
        $lineColor
      );
    opacity: 0.45;
  }
  &::after {
    background-image: radial-gradient(
        rgb(255,255,255),
        rgba(255,255,255,0) 40%
    );
  }
}

@for $i from 1 through $orbits {
  @keyframes orbit-#{$i} {
    from {
      transform: scale($orbitScale) rotateX(70deg) rotateY(180deg/$orbits * $i) rotateZ(0deg + ($orbitZStartInc * ($i - 1)));
    }
    to {
      transform: scale($orbitScale) rotateX(70deg) rotateY(180deg/$orbits * $i) rotateZ(360deg + ($orbitZStartInc * ($i - 1)));
    }
  }
} 
@keyframes smashBall {
  from {
    background-position: 0 ($dim*2);
    box-shadow:
      0 0 ($dim * 0.05) ($dim * 0.025) nth($glowColor, 1),
      0 0 ($dim * 0.15) ($dim * 0.11) nth($glowColor, 2);
  }
  50% {
    box-shadow:
      0 0 ($dim * 0.05) ($dim * 0.02) nth($glowColor, 1),
      0 0 ($dim * 0.15) ($dim * 0.09) nth($glowColor, 2);
  }
  to {
    background-position: 0 ($dim);
    box-shadow:
      0 0 ($dim * 0.05) ($dim * 0.025) nth($glowColor, 1),
      0 0 ($dim * 0.15) ($dim * 0.1) nth($glowColor, 2);
  }
}
